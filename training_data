import os
import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor
import pandas as pd
import time

if not os.path.exists('training-datasets\VOCdevkit'):
    os.system("start /wait cmd /c \"curl \"http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar\" --output training-datasets\\voc12.tar\"")
    os.chdir("training-datasets")
    os.system("start /wait cmd /c \"tar -xf voc12.tar\"")
    os.chdir("..")
    print(os.path.abspath(os.curdir))

class CustomImageDataset:
    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):
        self.img_labels = pd.read_csv(annotations_file)
        self.img_dir = img_dir
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return len(self.img_labels)

    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
        image = read_image(img_path)
        label = self.img_labels.iloc[idx, 1]
        if self.transform:
            image = self.transform(image)
        if self.target_transform:
            label = self.target_transform(label)
        return image, label


#training_data = CustomImageDataset(
    #annotations_file = "Users\Marti\datasets\VOC2012\VOCdevkit\VOC2012\Annotations"
    #img_dir = "Users/Marti/datasets/VOC2012/VOCdevkit/VOC2012/JPEGImages"
#)

#train_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)
#test_dataloader = DataLoader(test_data, batch_size=64, shuffle=True)

